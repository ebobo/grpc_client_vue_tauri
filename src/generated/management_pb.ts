//
// Copyright (C) 2023 Autronica Fire and Security. All rights reserved.

// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file management.proto (package management, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Meta } from "./common_pb.js";

/**
 * @generated from message management.Cursor
 */
export class Cursor extends Message<Cursor> {
  /**
   * @generated from field: bytes session = 1;
   */
  session = new Uint8Array(0);

  /**
   * @generated from field: common.Meta meta = 2;
   */
  meta?: Meta;

  constructor(data?: PartialMessage<Cursor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "management.Cursor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "meta", kind: "message", T: Meta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Cursor {
    return new Cursor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Cursor {
    return new Cursor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Cursor {
    return new Cursor().fromJsonString(jsonString, options);
  }

  static equals(a: Cursor | PlainMessage<Cursor> | undefined, b: Cursor | PlainMessage<Cursor> | undefined): boolean {
    return proto3.util.equals(Cursor, a, b);
  }
}

